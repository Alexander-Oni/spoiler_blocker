import psycopg2
from psycopg2 import Error
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

class DatabaseManager:

  def __init__(self, host='localhost', database='spoiler_blocker', 
                user='postgres', password='postgres'):
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    self.connection = None
    self.host = host
    self.database = database
    self.user = user
    self.password = password
    self.connect()

  def connect(self):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
    """
    if self.connection:
      self.connection.close()

    try:
      self.connection = psycopg2.connect(
          host=self.host,
          database=self.database,
          user=self.user,
          password=self.password,
          port=5432
      )
      print(Fore.GREEN + "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
      return True
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
      print(Fore.YELLOW + "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
      print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL —Å–µ—Ä–≤–µ—Ä")
      print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–∞—Ä–æ–ª—å")
      print("   - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'spoiler_blocker'")
      return False
    
  def create_tables(self):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –í—ã–ø–æ–ª–Ω—è–µ—Ç 5 SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    """
    try:
      with self.connection.cursor() as cursor:
      
        # –°–ø–∏—Å–æ–∫ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        tables = [
          # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          """
          CREATE TABLE IF NOT EXISTS Users (
              user_id SERIAL PRIMARY KEY,
              username VARCHAR(50) UNIQUE NOT NULL,
              email VARCHAR(100) UNIQUE NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              subscription_type VARCHAR(20) DEFAULT 'free'
          )
          """,
          
          # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          """
          CREATE TABLE IF NOT EXISTS Categories (
              category_id SERIAL PRIMARY KEY,
              category_name VARCHAR(100) NOT NULL,
              description TEXT,
              is_active BOOLEAN DEFAULT TRUE
          )
          """,
          
          # –¢–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          """
          CREATE TABLE IF NOT EXISTS Keywords (
              keyword_id SERIAL PRIMARY KEY,
              keyword_text VARCHAR(200) NOT NULL,
              category_id INTEGER REFERENCES Categories(category_id),
              severity_level VARCHAR(20) DEFAULT 'medium',
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
          """,
          
          # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          """
          CREATE TABLE IF NOT EXISTS User_Filters (
              filter_id SERIAL PRIMARY KEY,
              user_id INTEGER REFERENCES Users(user_id),
              keyword_id INTEGER REFERENCES Keywords(keyword_id),
              is_active BOOLEAN DEFAULT TRUE,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
          """,
          
          # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          """
          CREATE TABLE IF NOT EXISTS Blocked_Content_Log (
              log_id SERIAL PRIMARY KEY,
              user_id INTEGER REFERENCES Users(user_id),
              keyword_id INTEGER REFERENCES Keywords(keyword_id),
              url VARCHAR(500),
              blocked_content TEXT,
              blocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
          """
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π SQL-–∑–∞–ø—Ä–æ—Å
        for table_query in tables:
          cursor.execute(table_query)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.connection.commit()
        print(Fore.GREEN + "‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
      return False
      
  def add_user(self, username, email, subscription_type='free'):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
    """
    try:
      with self.connection.cursor() as cursor:
        query = "INSERT INTO Users (username, email, subscription_type) VALUES (%s, %s, %s)"
        cursor.execute(query, (username, email, subscription_type))
        self.connection.commit()
        print(Fore.GREEN + f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        return True
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
      return False
    
  def get_all_users(self):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
      with self.connection.cursor() as cursor:
        cursor.execute("SELECT user_id, username, email, subscription_type FROM Users")
        return cursor.fetchall()
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
      return []
    
  def add_category(self, category_name, description):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥.)
    """
    try:
      with self.connection.cursor() as cursor:
        query = "INSERT INTO Categories (category_name, description) VALUES (%s, %s)"
        cursor.execute(query, (category_name, description))
        self.connection.commit()
        print(Fore.GREEN + f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        return True
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
      return False
  
  def get_all_categories(self):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
      with self.connection.cursor() as cursor:
        cursor.execute("SELECT category_id, category_name, description FROM Categories WHERE is_active = TRUE")
        return cursor.fetchall()
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
      return []
        
  def add_keyword(self, keyword_text, category_id, severity_level='medium'):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """
    try:
      with self.connection.cursor() as cursor:
        query = "INSERT INTO Keywords (keyword_text, category_id, severity_level) VALUES (%s, %s, %s)"
        cursor.execute(query, (keyword_text, category_id, severity_level))
        self.connection.commit()
        print(Fore.GREEN + f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword_text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        return True
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
      return False
      
  def get_all_keywords(self):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL JOIN –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü
    """
    try:
      with self.connection.cursor() as cursor:
        query = """
        SELECT k.keyword_id, k.keyword_text, c.category_name, k.severity_level 
        FROM Keywords k 
        JOIN Categories c ON k.category_id = c.category_id
        """
        cursor.execute(query)
        return cursor.fetchall()
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
      return []
    
  def search_keywords(self, search_term):
    """
    –ò—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–ø–æ–∏—Å–∫ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º)
    """
    try:
      with self.connection.cursor() as cursor:
        query = "SELECT keyword_id, keyword_text FROM Keywords WHERE keyword_text ILIKE %s"
        cursor.execute(query, (f'%{search_term}%',))
        return cursor.fetchall()
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
      return []
      
  def delete_keyword(self, keyword_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
    """
    try:
      with self.connection.cursor() as cursor:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        cursor.execute("DELETE FROM User_Filters WHERE keyword_id = %s", (keyword_id,))
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞
        cursor.execute("DELETE FROM Blocked_Content_Log WHERE keyword_id = %s", (keyword_id,))
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        cursor.execute("DELETE FROM Keywords WHERE keyword_id = %s", (keyword_id,))
        
        self.connection.commit()
        print(Fore.GREEN + "‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!")
        return True
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
      return False
    
  def log_blocked_content(self, user_id, keyword_id, url, blocked_content):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ª–æ–≥
    """
    try:
      with self.connection.cursor() as cursor:
        query = "INSERT INTO Blocked_Content_Log (user_id, keyword_id, url, blocked_content) VALUES (%s, %s, %s, %s)"
        cursor.execute(query, (user_id, keyword_id, url, blocked_content))
        self.connection.commit()
        return True
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
      return False
    
  def get_user_stats(self, user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
      with self.connection.cursor() as cursor:
        query = """
        SELECT 
          COUNT(*) as total_blocks,
          COUNT(DISTINCT keyword_id) as unique_keywords_blocked,
          MAX(blocked_at) as last_blocked
        FROM Blocked_Content_Log 
        WHERE user_id = %s
        """
        cursor.execute(query, (user_id,))
        result = cursor.fetchone()
        
        if result:
          return {
            'total_blocks': result[0],
            'unique_keywords_blocked': result[1],
            'last_blocked': result[2]
          }
        return None
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
      return None
    
  def get_popular_keywords(self, limit=10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    """
    try:
      with self.connection.cursor() as cursor:
        query = """
          SELECT k.keyword_text, COUNT(b.keyword_id) as block_count
          FROM Keywords k
          LEFT JOIN Blocked_Content_Log b ON k.keyword_id = b.keyword_id
          GROUP BY k.keyword_id, k.keyword_text
          ORDER BY block_count DESC
          LIMIT %s
        """
        cursor.execute(query, (limit,))
        results = cursor.fetchall()
        
        popular_keywords = []
        for row in results:
          popular_keywords.append({
            'keyword_text': row[0],
            'block_count': row[1]
          })
        return popular_keywords
    
    except Error as e:
      print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤: {e}")
      return []
    
  def close_connection(self):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    if self.connection:
      self.connection.close()
      print(Fore.BLUE + "üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")