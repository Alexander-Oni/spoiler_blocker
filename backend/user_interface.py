from colorama import Fore, Style, init
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
init(autoreset=True)

class UserInterface:
  def __init__(self, db_manager):
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """

    self.db = db_manager
  
  def clear_screen(self):
    """
    –û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏ 
    """

    os.system('cls' if os.name == 'nt' else 'clear')

  def print_header(self, title):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ 
    """

    self.clear_screen()
    print(Fore.CYAN + "=" * 60)
    print(Fore.CYAN + f"SPOILER BLOCKER - {title}")
    print(Fore.CYAN + "=" * 60)
    print()
    
  def wait_for_enter(self):
    """
    –û–∂–∏–¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    """

    input(Fore.YELLOW + "\n –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

  def main_menu(self):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã
    """

    while True:
      self.print_header("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
      
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
      print(Fore.WHITE + "1.  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
      print(Fore.WHITE + "2.  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
      print(Fore.WHITE + "3.  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
      print(Fore.WHITE + "4.  –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
      print(Fore.WHITE + "5.  –ë—ã—Å—Ç—Ä–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
      print(Fore.RED + "0.  –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
      print()
      
      # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      choice = input(Fore.GREEN + " –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ")
      
      # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
      if choice == "1":
        self.users_menu()

      elif choice == "2":
        self.categories_menu()

      elif choice == "3":
        self.keywords_menu()

      elif choice == "4":
        self.statistics_menu()

      elif choice == "5":
        self.quick_block_menu()

      elif choice == "0":
        print(Fore.YELLOW + " –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        break

      else:
        print(Fore.RED + " –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        self.wait_for_enter()

  def users_menu(self):
    """
    –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
    """

    while True:
      self.print_header("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
      
      print(Fore.WHITE + "1.  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
      print(Fore.WHITE + "2.  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
      print(Fore.WHITE + "3.  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      print()
      
      choice = input(Fore.GREEN + " –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")
      
      if choice == "1":
        self.add_user()

      elif choice == "2":
        self.show_all_users()

      elif choice == "3":
        break

      else:
        print(Fore.RED + " –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        self.wait_for_enter()
  
  def add_user(self):
    """
    –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    self.print_header("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    
    print(Fore.YELLOW + " –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    username = input(" –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    email = input(" Email: ")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    print("\n –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:")
    print("1.  –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è")
    print("2.  –ü—Ä–µ–º–∏—É–º")
    sub_choice = input("–í—ã–±–æ—Ä (1-2): ")
    
    subscription_type = "free" if sub_choice == "1" else "premium"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if username and email:
      self.db.add_user(username, email, subscription_type)

    else:
      print(Fore.RED + " –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
    
    self.wait_for_enter()
  
  def show_all_users(self):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
    """

    self.print_header("–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    
    users = self.db.get_all_users()
    if users:
      print(Fore.GREEN + f" –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
      print()
      print(Fore.CYAN + "ID  | –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | Email              | –ü–æ–¥–ø–∏—Å–∫–∞")
      print(Fore.CYAN + "-" * 55)
      
      # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã
      for user in users:
        user_id, username, email, subscription = user
        sub_icon = "üíé" if subscription == "premium" else "üÜì"
        print(f"{user_id:3} | {username:15} | {email:18} | {sub_icon} {subscription}")

    else:
      print(Fore.YELLOW + "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    self.wait_for_enter()

  def categories_menu(self):
    """
    –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """

    while True:
      self.print_header("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò")
      
      print(Fore.WHITE + "1.  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
      print(Fore.WHITE + "2.  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
      print(Fore.WHITE + "3.  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      print()
      
      choice = input(Fore.GREEN + " –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")
      
      if choice == "1":
        self.add_category()

      elif choice == "2":
        self.show_all_categories()

      elif choice == "3":
        break

      else:
        print(Fore.RED + " –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        self.wait_for_enter()
  
  def add_category(self):
    """
    –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """

    self.print_header("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò")
    
    print(Fore.YELLOW + " –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    category_name = input(" –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
    description = input(" –û–ø–∏—Å–∞–Ω–∏–µ: ")
    
    if category_name:
      self.db.add_category(category_name, description)

    else:
      print(Fore.RED + " –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
    
    self.wait_for_enter()
  
  def show_all_categories(self):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """

    self.print_header("–°–ü–ò–°–û–ö –ö–ê–¢–ï–ì–û–†–ò–ô")
    
    categories = self.db.get_all_categories()
    if categories:
      print(Fore.GREEN + f" –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
      print()

      for category in categories:
        category_id, category_name, description = category
        print(f"   {category_id}. {category_name} - {description}")

    else:
      print(Fore.YELLOW + " –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    self.wait_for_enter()

  def keywords_menu(self):
    """
    –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    """

    while True:
      self.print_header("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–ú–ò –°–õ–û–í–ê–ú–ò")
      
      print(Fore.WHITE + "1.  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
      print(Fore.WHITE + "2.  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
      print(Fore.WHITE + "3.  –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
      print(Fore.WHITE + "4.  –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
      print(Fore.WHITE + "5.  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      print()
      
      choice = input(Fore.GREEN + " –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ")
      
      if choice == "1":
        self.add_keyword()

      elif choice == "2":
        self.show_all_keywords()

      elif choice == "3":
        self.search_keywords()

      elif choice == "4":
        self.delete_keyword()

      elif choice == "5":
        break

      else:
        print(Fore.RED + " –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        self.wait_for_enter()
    
  def add_keyword(self):
    """
    –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    """

    self.print_header("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–û–ì–û –°–õ–û–í–ê")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = self.db.get_all_categories()
    if not categories:
      print(Fore.RED + " –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
      self.wait_for_enter()
      return
    
    print(Fore.YELLOW + " –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    for category in categories:
      category_id, category_name, description = category
      print(f"   {category_id}. {category_name}")
    print()
    
    try:
      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      category_id = int(input(" –í—ã–±–µ—Ä–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "))
      keyword_text = input(" –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞: ")
      
      # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
      print("\n –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:")
      print("1. üî¥ –í—ã—Å–æ–∫–∏–π (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ–π–ª–µ—Ä—ã)")
      print("2. üü° –°—Ä–µ–¥–Ω–∏–π (–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å—é–∂–µ—Ç–∞)") 
      print("3. üü¢ –ù–∏–∑–∫–∏–π (–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ–π–ª–µ—Ä—ã)")
      severity_choice = input("–í—ã–±–æ—Ä (1-3): ")
      
      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      severity_map = {"1": "high", "2": "medium", "3": "low"}
      severity_level = severity_map.get(severity_choice, "medium")
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
      if keyword_text and category_id:
        self.db.add_keyword(keyword_text, category_id, severity_level)

      else:
        print(Fore.RED + " –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")

    except ValueError:
      print(Fore.RED + " ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    self.wait_for_enter()
  
  def show_all_keywords(self):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """

    self.print_header("–í–°–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê")
    
    keywords = self.db.get_all_keywords()
    if keywords:
      print(Fore.GREEN + f" –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")
      print()
      for keyword in keywords:
        keyword_id, keyword_text, category_name, severity_level = keyword
        # –í—ã–±–∏—Ä–∞–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_icon = "üî¥" if severity_level == "high" else "üü°" if severity_level == "medium" else "üü¢"
        print(f"   {keyword_id}. {keyword_text} ({category_name}) {severity_icon}")

    else:
      print(Fore.YELLOW + "üì≠ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    self.wait_for_enter()
  
  def search_keywords(self):
    """
    –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    """

    self.print_header("–ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í")
    
    search_term = input(" –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    if search_term:
      results = self.db.search_keywords(search_term)

      if results:
        print(Fore.GREEN + f" –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        print()

        for keyword_id, keyword_text in results:
          print(f"   {keyword_id}. {keyword_text}")

      else:
        print(Fore.YELLOW + " –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    else:
      print(Fore.RED + " –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞!")
    
    self.wait_for_enter()
  
  def delete_keyword(self):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    """

    self.print_header("–£–î–ê–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–û–ì–û –°–õ–û–í–ê")
    
    keywords = self.db.get_all_keywords()
    if not keywords:
      print(Fore.YELLOW + " –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
      self.wait_for_enter()
      return
    
    print(Fore.YELLOW + " –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
    for keyword in keywords:
      keyword_id, keyword_text, category_name, severity_level = keyword
      print(f"   {keyword_id}. {keyword_text} ({category_name})")
    print()
    
    try:
      keyword_id = int(input("  –í–≤–µ–¥–∏—Ç–µ ID –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
      confirm = input(" –í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ")

      if confirm.lower() == 'y':
          self.db.delete_keyword(keyword_id)

      else:
          print(Fore.YELLOW + " –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except ValueError:
      print(Fore.RED + " ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    self.wait_for_enter()

  def statistics_menu(self):
    """
    –ú–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    """

    while True:
      self.print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
      
      print(Fore.WHITE + "1.  –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
      print(Fore.WHITE + "2.  –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
      print(Fore.WHITE + "3.  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
      print(Fore.WHITE + "4.  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
      print()
      
      choice = input(Fore.GREEN + " –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ")
      
      if choice == "1":
        self.show_general_stats()

      elif choice == "2":
        self.show_popular_keywords()

      elif choice == "3":
        self.show_user_stats()

      elif choice == "4":
        break

      else:
        print(Fore.RED + " –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        self.wait_for_enter()

  def show_general_stats(self):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    """

    self.print_header("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    users = self.db.get_all_users()
    categories = self.db.get_all_categories()
    keywords = self.db.get_all_keywords()
    
    print(Fore.GREEN + " –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print()
    print(f" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f" –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    print(f" –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")
    print()  
    
    self.wait_for_enter()

  def show_popular_keywords(self):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    """

    self.print_header("–ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê")
    
    try:
      limit = int(input(" –°–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or "10")
      popular_keywords = self.db.get_popular_keywords(limit)
      
      if popular_keywords:
        print()
        print(Fore.GREEN + f" –¢–æ–ø-{len(popular_keywords)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
        print()

        for i, item in enumerate(popular_keywords, 1):
          print(f"{i:2}. {item['keyword_text']} - {item['block_count']} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")

      else:
        print(Fore.YELLOW + " –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö")

    except ValueError:
      print(Fore.RED + " –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    self.wait_for_enter()

  def show_user_stats(self):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    self.print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    
    users = self.db.get_all_users()
    if not users:
      print(Fore.YELLOW + " –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
      self.wait_for_enter()
      return
    
    print(Fore.YELLOW + " –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    for user in users:
      user_id, username, email, subscription = user
      print(f"   {user_id}. {username} ({email})")
    print()
    
    try:
      user_id = int(input(" –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
      stats = self.db.get_user_stats(user_id)
      
      if stats:
        print()
        print(Fore.GREEN + f" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}:")
        print(f"    –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats['total_blocks']}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {stats['unique_keywords_blocked']}")
        print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {stats['last_blocked'] or '–Ω–∏–∫–æ–≥–¥–∞'}")

      else:
        print(Fore.YELLOW + f" –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")

    except ValueError:
      print(Fore.RED + " ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    self.wait_for_enter()