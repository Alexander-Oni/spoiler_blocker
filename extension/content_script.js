console.log("SpoilerBlocker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ó–∞–≥—Ä—É–∂–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...");

let SPOILER_KEYWORDS = [];
let USER_ID = 1;
let API_BASE_URL = "http://localhost:5000";

function decodeUnicode(str) {
  try {
    return str.replace(/\\u[\dA-F]{4}/gi, (match) =>
      String.fromCharCode(parseInt(match.replace(/\\u/g, ""), 16))
    );
  } catch (e) {
    console.log("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", e);
    return str; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  }
}

function normalizeKeywords(keywords) {
  return keywords.map((keyword) => {
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    return keyword.trim().toLowerCase();
  });
}

async function loadKeywordsFromServer() {
  try {
    console.log("–ó–∞–≥—Ä—É–∂–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å API —Å–µ—Ä–≤–µ—Ä–∞...");

    const response = await fetch(`${API_BASE_URL}/api/keywords`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data);

    if (data.success) {
      SPOILER_KEYWORDS = data.keywords.map((kw) => {
        const decodedText = decodeUnicode(kw.text);
        console.log(`–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: "${kw.text}" ‚Üí "${decodedText}"`);
        return decodedText;
      });

      SPOILER_KEYWORDS = normalizeKeywords(SPOILER_KEYWORDS);

      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${SPOILER_KEYWORDS.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
      console.log("–°–ª–æ–≤–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", SPOILER_KEYWORDS);
    } else {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:", data.error);
      useDefaultKeywords();
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Å–µ—Ä–≤–µ—Ä—É:", error);
    useDefaultKeywords();
  }
}

function useDefaultKeywords() {
  // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ –ö–ò–†–ò–õ–õ–ò–¶–£
  SPOILER_KEYWORDS = [
    "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤ —Ñ–∏–Ω–∞–ª",
    "–°–º–µ—Ä—Ç—å –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫–∞",
    "–°—é–∂–µ—Ç –î—é–Ω—ã",
    "—Å–ø–æ–π–ª–µ—Ä",
    "—Ñ–∏–Ω–∞–ª",
    "—Å–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
    "—Ä–∞–∑–≤—è–∑–∫–∞",
  ];
  console.log("–ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞:", SPOILER_KEYWORDS);
  setTimeout(blockSpoilers, 100);
}

async function sendBlockLogToServer(keywordText, blockedContent) {
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: "${keywordText}"`);

    const logData = {
      user_id: USER_ID,
      keyword_text: keywordText,
      url: window.location.href,
      content: blockedContent.substring(0, 200),
    };

    console.log("üì® –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", logData);

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö
    const response = await fetch(`${API_BASE_URL}/api/block`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(logData),
    });

    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `HTTP error! status: ${response.status}, response: ${errorText}`
      );
    }

    const result = await response.json();
    console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

    if (result.success) {
      console.log("–õ–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");

      // üÜï –û–ë–ù–û–í–õ–Ø–ï–ú POPUP –ß–ï–†–ï–ó BACKGROUND SCRIPT
      chrome.runtime.sendMessage({ action: "blockedContent" });
    } else {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", result.error);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);

    // –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò
    if (error.message.includes("Failed to fetch")) {
      console.error("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ CORS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:");
      console.error("–ó–∞–ø—É—â–µ–Ω –ª–∏ API —Å–µ—Ä–≤–µ—Ä –Ω–∞ localhost:5000");
      console.error("CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞");
    } else if (error.message.includes("404")) {
      console.error("Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API");
    } else if (error.message.includes("500")) {
      console.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ API");
    }
  }
}

function blockSpoilers() {
  console.log(
    `–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: ${SPOILER_KEYWORDS.length}`
  );

  if (SPOILER_KEYWORDS.length === 0) {
    console.log("–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
    return;
  }

  let blockedCount = 0;
  const elements = document.querySelectorAll(
    "p, span, div, li, td, h1, h2, h3, h4, h5, h6, a, strong, em"
  );

  elements.forEach((element) => {
    SPOILER_KEYWORDS.forEach((spoiler) => {
      try {
        const originalHTML = element.innerHTML;
        const regex = new RegExp(spoiler, "gi");

        if (regex.test(originalHTML)) {
          const newHTML = originalHTML.replace(
            regex,
            '<span style="background: #ffeb3b; color: #000; padding: 2px 4px; border-radius: 3px;">[–°–ü–û–ô–õ–ï–† –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù]</span>'
          );
          element.innerHTML = newHTML;
          blockedCount++;

          console.log(`–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: "${spoiler}"`);
          sendBlockLogToServer(spoiler, originalHTML.substring(0, 200));
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞ "${spoiler}":`, error);
      }
    });
  });

  if (blockedCount > 0) {
    console.log(`SpoilerBlocker –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${blockedCount} —Å–ø–æ–π–ª–µ—Ä–æ–≤`);
    showBlockNotification(blockedCount);
  }
}

function showBlockNotification(count) {
  const notification = document.createElement("div");
  notification.innerHTML = `
        <div style="background: #4CAF50; color: white; padding: 10px 15px; border-radius: 5px; 
                   font-family: Arial, sans-serif; font-size: 14px; margin-bottom: 5px;">
            üõ°Ô∏è SpoilerBlocker –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${count} —Å–ø–æ–π–ª–µ—Ä–æ–≤
        </div>
    `;
  notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    `;

  document.body.appendChild(notification);

  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 3000);
}

async function initializeExtension() {
  console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SpoilerBlocker...");
  console.log("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:", window.location.href);

  try {
    await loadKeywordsFromServer();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    useDefaultKeywords();
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  setInterval(() => {
    console.log("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...");
    blockSpoilers();
  }, 5000);

  console.log("SpoilerBlocker —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initializeExtension);
} else {
  setTimeout(initializeExtension, 100);
}

const observer = new MutationObserver((mutations) => {
  let hasChanges = false;

  mutations.forEach((mutation) => {
    if (mutation.addedNodes.length > 0) {
      hasChanges = true;
    }
  });

  if (hasChanges) {
    console.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM, –ø—Ä–æ–≤–µ—Ä—è—é...");
    setTimeout(blockSpoilers, 500);
  }
});

setTimeout(() => {
  try {
    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    console.log("–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è:", error);
  }
}, 1000);
